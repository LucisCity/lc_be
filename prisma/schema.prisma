generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../libs/prisma/src/@generated/prisma-nestjs-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           String         @id @default(cuid()) @db.VarChar(45)
  role         UserRole       @default(USER)
  status       UserStatus     @default(PENDING)
  email        String?        @unique @db.VarChar(255)
  ref_code     String         @unique @db.VarChar(10)
  invited_by   String?        @db.VarChar(45)
  google_id    String?        @unique @db.VarChar(45)
  facebook_id  String?        @unique @db.VarChar(45)
  password     String?        @db.VarChar(255)
  profile      UserProfile?
  notification Notification[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt

  referral_log ReferralLog?
  wallet       Wallet?

  @@map("user")
}

model UserProfile {
  user_id       String    @id
  user_name     String?   @unique() @db.VarChar(45)
  display_name  String?   @db.VarChar(45)
  given_name    String?   @db.VarChar(45)
  family_name   String?   @db.VarChar(45)
  phone         String?   @db.VarChar(45)
  avatar        String?   @db.VarChar(1024)
  date_of_birth DateTime? @db.Date
  cover         String?   @db.VarChar(512)
  country_code  String?   @db.VarChar(45)
  user          User      @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_profile")
}

model LoginLog {
  uid     String @id @default(cuid()) @db.VarChar(45)
  user_id String
  device  String
  ip      String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("login_log")
}

enum ReferralType {
  REGISTER
  BUY_GALAXY_CARD
}

model ReferralLog {
  user_id    String @id
  user       User   @relation(fields: [user_id], references: [id])
  invited_by String @db.VarChar(45)

  type       ReferralType?
  is_claim    Boolean        @default(false) @db.Boolean

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("referral_log")
}

model Contract {
  id            String  @id @default(cuid()) @db.VarChar(45)
  address       String  @db.VarChar(45)
  admin         String? @db.VarChar(45)
  admin_prv_key String? @db.Text
  abi           String? @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("contract")
}

model PoolWalletType {
  code                      String               @db.VarChar(100)
  description               String               @db.Text
  pool_wallet               PoolWallet[]

  @@unique([code])
  @@map("pool_wallet_type")
}

model PoolWallet {
  id                    String                  @id @default(cuid()) @db.VarChar(45)
  address               String                  @db.VarChar(45)
  type                  String                  @db.VarChar(100)
  pool_wallet_type      PoolWalletType          @relation(fields: [type], references: [code])
  prv                   String?                 @db.Text

  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@map("pool_wallet")
}

enum TransactionStatus {
  PENDING
  PROCESSING
  CONFIRMING
  SUCCEED
  FAILED
}

model BlockchainTransaction {
  id            String            @id @default(cuid()) @db.VarChar(45)
  tx_hash       String            @db.VarChar(255)
  status        TransactionStatus @default(PENDING)
  message_error String?           @db.Text
  abi           String?           @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([tx_hash])
  @@index([status])
  @@map("blockchain_transaction")
}

model Wallet {
  user_id String  @id
  user    User    @relation(fields: [user_id], references: [id])
  balance Decimal @default(0)

  transaction_log TransactionLog[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("wallet")
}

model TransactionType {
  code            String           @db.VarChar(100)
  description     String           @db.Text
  transaction_log TransactionLog[]

  @@unique([code])
  @@map("transaction_type")
}

model TransactionLog {
  id               String          @id @default(cuid()) @db.VarChar(45)
  type             String          @db.VarChar(100)
  transaction_type TransactionType @relation(fields: [type], references: [code])
  user_id          String          @db.VarChar(45)
  wallet           Wallet          @relation(fields: [user_id], references: [user_id])
  amount           Decimal
  description      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("transaction_log")
}

model Project {
  id               String    @id @default(cuid()) @db.VarChar(45)
  title            String    @db.VarChar(512)
  price            Int
  rate             Decimal?  @db.Decimal(2, 1)
  total_rate       Int?
  address          String    @db.VarChar(1024)
  location         String    @db.VarChar(30) // lat,long
  favorites        Int?
  hightlight       String
  reason_invest    String
  policy_link      String
  medias           Json
  enable           Boolean   @default(false)
  open_sale_at     DateTime
  take_profit_at   DateTime
  wait_transfer_at DateTime?
  ended            Boolean?
  profit_period    Int // in day
  offers           Json

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("project")
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    String
  title      String?  @db.VarChar(512)
  content    String?  @db.Text
  is_seen    Boolean  @default(false)
  link       String?  @db.VarChar(512)
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("notification")
}
