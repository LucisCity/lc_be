generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../libs/prisma/src/@generated/prisma-nestjs-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id          String        @id @default(cuid()) @db.VarChar(45)
  role        UserRole      @default(USER)
  status      UserStatus    @default(PENDING)
  email       String?       @unique @db.VarChar(255)
  ref_code    String        @db.VarChar(10) @unique
  invited_by  String?       @db.VarChar(45)
  google_id   String?       @unique @db.VarChar(45)
  facebook_id String?       @unique @db.VarChar(45)
  password    String?       @db.VarChar(255)
  profile     UserProfile?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  referral_log ReferralLog?
  @@map("user")
}

model UserProfile {
  user_id       String    @id
  user_name     String?   @unique() @db.VarChar(45)
  display_name  String?   @db.VarChar(45)
  given_name    String?   @db.VarChar(45)
  family_name   String?   @db.VarChar(45)
  phone         String?   @db.VarChar(45)
  avatar        String?   @db.VarChar(1024)
  date_of_birth DateTime? @db.Date
  cover         String?   @db.VarChar(512)
  country_code  String?   @db.VarChar(45)
  user          User      @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_profile")
}

model LoginLog {
  uid     String @id @default(cuid()) @db.VarChar(45)
  user_id String
  device  String
  ip      String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("login_log")
}

enum ReferralType {
  REGISTER
  BUY_GALAXY_CARD
}

model ReferralLog {
  user_id    String         @id
  user       User           @relation(fields: [user_id], references: [id])
  invited_by String         @db.VarChar(45)

  type       ReferralType?
  isClaim    Boolean        @default(false) @db.Boolean

  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  @@map("referral_log")
}

model Contract {
  id            String       @id @default(cuid()) @db.VarChar(45)
  address       String       @db.VarChar(45)
  admin         String?      @db.VarChar(45)
  admin_prv_key String?      @db.Text
  abi           String?      @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("contract")
}

model PoolWallet {
  id            String       @id @default(cuid()) @db.VarChar(45)
  address       String       @db.VarChar(45)
  prv           String?      @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("pool_wallet")
}

enum TransactionStatus {
  PENDING
  PROCESSING
  CONFIRMING
  SUCCEED
  FAILED
}

model BlockchainTransaction {
  id               String               @id @default(cuid()) @db.VarChar(45)
  tx_hash          String               @db.VarChar(255)
  status           TransactionStatus    @default(PENDING)
  message_error    String?              @db.Text
  abi              String?              @db.Text

  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt

  @@unique([tx_hash])
  @@index([status])
  @@map("blockchain_transaction")
}
