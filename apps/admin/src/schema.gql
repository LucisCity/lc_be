# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserKycVerification {
  id: ID!
  user_id: String!
  front_id: String!
  back_id: String!
  holding_id: String!
  status: KycStatus!
  user: User!
  created_at: DateTime!
  updated_at: DateTime!
}

enum KycStatus {
  PENDING
  SUCCESS
  FAILED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ReferralLog {
  user_id: ID!
  user: User!
  invited_by: String!
  type: ReferralType
  is_claim: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
}

enum ReferralType {
  REGISTER
  BUY_GALAXY_CARD
}

type Wallet {
  user_id: ID!
  user: User!
  balance: Decimal!
  created_at: DateTime!
  updated_at: DateTime!
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type VipUserClaimProfitChangeLog {
  id: ID!
  card_id: String!
  vipCard: VipCard!
  amount: Decimal!
  number_quarter: Int!
  is_claim: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
}

type VipCardCount {
  change_log: Int!
}

type VipCard {
  id: ID!
  user_id: String!
  number: String!
  name: String!
  tier: VipCardTier
  valid_from: DateTime
  user: User!
  card_value: Decimal!
  change_log: [VipUserClaimProfitChangeLog!]
  created_at: DateTime!
  updated_at: DateTime!
  _count: VipCardCount!
}

enum VipCardTier {
  GALAXY_PREMIUM
}

type ProjectNftOwner {
  project_id: String!
  user_id: String!
  total_nft: Int!
  currency_amount: Decimal!
  project_ended: Boolean!
  is_sell_voted: Boolean!
  user: User!
  created_at: DateTime!
  updated_at: DateTime!
}

type BlockchainTransaction {
  id: ID!
  tx_hash: String!
  status: TransactionStatus!
  message_error: String
  abi: String
  transaction_log_id: String
  transaction_log: TransactionLog
  created_at: DateTime!
  updated_at: DateTime!
}

enum TransactionStatus {
  PENDING
  PROCESSING
  CONFIRMING
  SUCCEED
  FAILED
}

type TransactionLog {
  id: ID!
  type: TransactionType!
  user_id: String!
  user: User!
  amount: Decimal!
  description: String
  blockchain_transaction: BlockchainTransaction
  created_at: DateTime!
  updated_at: DateTime!
}

enum TransactionType {
  CLAIM_REFERRAL
  CLAIM_PROFIT
  BUY_NFT
  WITHDRAW_BALANCE
  VIP_USER_CLAIM_PROFIT
}

type UserCount {
  kyc_verification: Int!
  projectNfts: Int!
  transaction_log: Int!
}

type User {
  id: ID!
  role: UserRole!
  status: UserStatus!
  email: String
  ref_code: String!
  invited_by: String
  google_id: String
  facebook_id: String
  password: String
  profile: UserProfile
  kyc_verification: [UserKycVerification!]
  created_at: DateTime!
  updated_at: DateTime!
  referral_log: ReferralLog
  wallet: Wallet
  wallet_address: String
  vipCard: VipCard
  projectNfts: [ProjectNftOwner!]
  transaction_log: [TransactionLog!]
  _count: UserCount!
}

enum UserRole {
  ADMIN
  USER
  VIP_USER
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
}

type UserProfile {
  user_id: ID!
  user_name: String
  display_name: String
  given_name: String
  family_name: String
  phone: String
  avatar: String
  date_of_birth: DateTime
  cover: String
  country_code: String
  user: User!
  created_at: DateTime!
  updated_at: DateTime!
}

type ProfileGql {
  user_id: ID!
  user_name: String
  display_name: String
  given_name: String
  family_name: String
  avatar: String
  date_of_birth: DateTime
  cover: String
}

type UserGql {
  id: ID!
  email: String
  ref_code: String!
  kyc_verification: [UserKycVerification!]
  referral_log: ReferralLog
  wallet: Wallet
  wallet_address: String
  vipCard: VipCard
  projectNfts: [ProjectNftOwner!]
  transaction_log: [TransactionLog!]
  _count: UserCount!
  profile: ProfileGql!
}

type AuthGql {
  token: String!
  user: UserGql!
}

type Query {
  """list pending kycs"""
  getPendingKycs: [UserKycVerification!]

  """list kycs with options"""
  getKycs(userId: String, id: Int, status: KycStatus): [UserKycVerification!]

  """list vip cards with options"""
  getVipCards(userId: String, id: String, number: String, tier: VipCardTier): [VipCard!]
}

type Mutation {
  """Upload new project"""
  uploadProject(input: ProjectCreateInputGql!): Boolean

  """Finish project"""
  finishProject(projectId: String!): Boolean

  """Admin login"""
  login(email: String!, password: String!): AuthGql!

  """Admin register"""
  register(email: String!, password: String!): Boolean!

  """update kycs"""
  updateKyc(userId: String, status: KycStatus): Boolean

  """create vip card"""
  createVipCard(input: VipCardCreateInputGql): VipCard

  """update vip card"""
  updateVipCard(number: String, input: VipCardUpdateInputGql): Boolean

  """delete vip card"""
  deleteVipCard(number: String): Boolean

  """set pool wallet"""
  setPoolWallet(address: String!, privateKey: String!): Boolean!

  """set project contract"""
  setProjectContract(address: String!, abi: String): Boolean!
}

input ProjectCreateInputGql {
  title: String!
  price: Int!
  nft_price: Decimal!
  total_nft: Int
  total_nft_sold: Int
  type: ProjectType
  thumbnail: String!
  address: String!
  policy_link: String!
  profit_period: Int
  profit_period_index: Int
  contract: ContractCreateNestedOneWithoutProjectInput
  created_at: DateTime
  updated_at: DateTime
  location: String!
  open_sale_at: DateTime!
  take_profit_at: DateTime!
  profile: ProjectProfileCreateInputGql!
  contract_address: String
}

enum ProjectType {
  HOUSE
  VILLA
  HOTEL
  HOMESTAY
  TOURIST_VILLAGE
}

input ContractCreateNestedOneWithoutProjectInput {
  create: ContractCreateWithoutProjectInput
  connectOrCreate: ContractCreateOrConnectWithoutProjectInput
  connect: ContractWhereUniqueInput
}

input ContractCreateWithoutProjectInput {
  id: String
  address: String!
  admin: String
  admin_prv_key: String
  abi: String
  type: ContractType
  created_at: DateTime
  updated_at: DateTime
}

enum ContractType {
  TOKEN
  NFT
}

input ContractCreateOrConnectWithoutProjectInput {
  where: ContractWhereUniqueInput!
  create: ContractCreateWithoutProjectInput!
}

input ContractWhereUniqueInput {
  id: String
  address: String
}

input ProjectProfileCreateInputGql {
  create: ProjectProfileCreateWithoutProjectInputGql
}

input ProjectProfileCreateWithoutProjectInputGql {
  reason_invest: String
  highlight: String
  medias: [ProjectMedia!]!
  offers: [Int!]!
  events: [ProjectEvent!]!
}

input ProjectMedia {
  """Width of image"""
  width: Int!

  """Height of image"""
  height: Int!

  """Media url"""
  url: String!

  """Thumbnail url"""
  thumbnail: String
}

input ProjectEvent {
  """Event start time"""
  start_at: DateTime!

  """Event title"""
  title: String!

  """Event description"""
  description: String!
}

input VipCardCreateInputGql {
  name: String!
  tier: VipCardTier
  valid_from: DateTime
  user: UserCreateNestedOneWithoutVipCardInput!
  card_value: Decimal
  change_log: VipUserClaimProfitChangeLogCreateNestedManyWithoutVipCardInput
}

input UserCreateNestedOneWithoutVipCardInput {
  create: UserCreateWithoutVipCardInput
  connectOrCreate: UserCreateOrConnectWithoutVipCardInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutVipCardInput {
  id: String
  role: UserRole
  status: UserStatus
  email: String
  ref_code: String!
  invited_by: String
  google_id: String
  facebook_id: String
  password: String
  profile: UserProfileCreateNestedOneWithoutUserInput
  kyc_verification: UserKycVerificationCreateNestedManyWithoutUserInput
  created_at: DateTime
  updated_at: DateTime
  referral_log: ReferralLogCreateNestedOneWithoutUserInput
  wallet: WalletCreateNestedOneWithoutUserInput
  wallet_address: String
  projectNfts: ProjectNftOwnerCreateNestedManyWithoutUserInput
  transaction_log: TransactionLogCreateNestedManyWithoutUserInput
}

input UserProfileCreateNestedOneWithoutUserInput {
  create: UserProfileCreateWithoutUserInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileCreateWithoutUserInput {
  user_name: String
  display_name: String
  given_name: String
  family_name: String
  phone: String
  avatar: String
  date_of_birth: DateTime
  cover: String
  country_code: String
  created_at: DateTime
  updated_at: DateTime
}

input UserProfileCreateOrConnectWithoutUserInput {
  where: UserProfileWhereUniqueInput!
  create: UserProfileCreateWithoutUserInput!
}

input UserProfileWhereUniqueInput {
  user_id: String
  user_name: String
}

input UserKycVerificationCreateNestedManyWithoutUserInput {
  create: [UserKycVerificationCreateWithoutUserInput!]
  connectOrCreate: [UserKycVerificationCreateOrConnectWithoutUserInput!]
  createMany: UserKycVerificationCreateManyUserInputEnvelope
  connect: [UserKycVerificationWhereUniqueInput!]
}

input UserKycVerificationCreateWithoutUserInput {
  front_id: String!
  back_id: String!
  holding_id: String!
  status: KycStatus
  created_at: DateTime
  updated_at: DateTime
}

input UserKycVerificationCreateOrConnectWithoutUserInput {
  where: UserKycVerificationWhereUniqueInput!
  create: UserKycVerificationCreateWithoutUserInput!
}

input UserKycVerificationWhereUniqueInput {
  id: Int
}

input UserKycVerificationCreateManyUserInputEnvelope {
  data: [UserKycVerificationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserKycVerificationCreateManyUserInput {
  id: Int
  front_id: String!
  back_id: String!
  holding_id: String!
  status: KycStatus
  created_at: DateTime
  updated_at: DateTime
}

input ReferralLogCreateNestedOneWithoutUserInput {
  create: ReferralLogCreateWithoutUserInput
  connectOrCreate: ReferralLogCreateOrConnectWithoutUserInput
  connect: ReferralLogWhereUniqueInput
}

input ReferralLogCreateWithoutUserInput {
  invited_by: String!
  type: ReferralType
  is_claim: Boolean
  created_at: DateTime
  updated_at: DateTime
}

input ReferralLogCreateOrConnectWithoutUserInput {
  where: ReferralLogWhereUniqueInput!
  create: ReferralLogCreateWithoutUserInput!
}

input ReferralLogWhereUniqueInput {
  user_id: String
}

input WalletCreateNestedOneWithoutUserInput {
  create: WalletCreateWithoutUserInput
  connectOrCreate: WalletCreateOrConnectWithoutUserInput
  connect: WalletWhereUniqueInput
}

input WalletCreateWithoutUserInput {
  balance: Decimal
  created_at: DateTime
  updated_at: DateTime
}

input WalletCreateOrConnectWithoutUserInput {
  where: WalletWhereUniqueInput!
  create: WalletCreateWithoutUserInput!
}

input WalletWhereUniqueInput {
  user_id: String
}

input ProjectNftOwnerCreateNestedManyWithoutUserInput {
  create: [ProjectNftOwnerCreateWithoutUserInput!]
  connectOrCreate: [ProjectNftOwnerCreateOrConnectWithoutUserInput!]
  createMany: ProjectNftOwnerCreateManyUserInputEnvelope
  connect: [ProjectNftOwnerWhereUniqueInput!]
}

input ProjectNftOwnerCreateWithoutUserInput {
  project_id: String!
  total_nft: Int!
  currency_amount: Decimal!
  project_ended: Boolean
  is_sell_voted: Boolean
  created_at: DateTime
  updated_at: DateTime
}

input ProjectNftOwnerCreateOrConnectWithoutUserInput {
  where: ProjectNftOwnerWhereUniqueInput!
  create: ProjectNftOwnerCreateWithoutUserInput!
}

input ProjectNftOwnerWhereUniqueInput {
  project_id_user_id: ProjectNftOwnerProject_idUser_idCompoundUniqueInput
}

input ProjectNftOwnerProject_idUser_idCompoundUniqueInput {
  project_id: String!
  user_id: String!
}

input ProjectNftOwnerCreateManyUserInputEnvelope {
  data: [ProjectNftOwnerCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ProjectNftOwnerCreateManyUserInput {
  project_id: String!
  total_nft: Int!
  currency_amount: Decimal!
  project_ended: Boolean
  is_sell_voted: Boolean
  created_at: DateTime
  updated_at: DateTime
}

input TransactionLogCreateNestedManyWithoutUserInput {
  create: [TransactionLogCreateWithoutUserInput!]
  connectOrCreate: [TransactionLogCreateOrConnectWithoutUserInput!]
  createMany: TransactionLogCreateManyUserInputEnvelope
  connect: [TransactionLogWhereUniqueInput!]
}

input TransactionLogCreateWithoutUserInput {
  id: String
  type: TransactionType!
  amount: Decimal!
  description: String
  blockchain_transaction: BlockchainTransactionCreateNestedOneWithoutTransaction_logInput
  created_at: DateTime
  updated_at: DateTime
}

input BlockchainTransactionCreateNestedOneWithoutTransaction_logInput {
  create: BlockchainTransactionCreateWithoutTransaction_logInput
  connectOrCreate: BlockchainTransactionCreateOrConnectWithoutTransaction_logInput
  connect: BlockchainTransactionWhereUniqueInput
}

input BlockchainTransactionCreateWithoutTransaction_logInput {
  id: String
  tx_hash: String!
  status: TransactionStatus
  message_error: String
  abi: String
  created_at: DateTime
  updated_at: DateTime
}

input BlockchainTransactionCreateOrConnectWithoutTransaction_logInput {
  where: BlockchainTransactionWhereUniqueInput!
  create: BlockchainTransactionCreateWithoutTransaction_logInput!
}

input BlockchainTransactionWhereUniqueInput {
  id: String
  tx_hash: String
  transaction_log_id: String
}

input TransactionLogCreateOrConnectWithoutUserInput {
  where: TransactionLogWhereUniqueInput!
  create: TransactionLogCreateWithoutUserInput!
}

input TransactionLogWhereUniqueInput {
  id: String
}

input TransactionLogCreateManyUserInputEnvelope {
  data: [TransactionLogCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input TransactionLogCreateManyUserInput {
  id: String
  type: TransactionType!
  amount: Decimal!
  description: String
  created_at: DateTime
  updated_at: DateTime
}

input UserCreateOrConnectWithoutVipCardInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutVipCardInput!
}

input UserWhereUniqueInput {
  id: String
  email: String
  ref_code: String
  google_id: String
  facebook_id: String
  wallet_address: String
}

input VipUserClaimProfitChangeLogCreateNestedManyWithoutVipCardInput {
  create: [VipUserClaimProfitChangeLogCreateWithoutVipCardInput!]
  connectOrCreate: [VipUserClaimProfitChangeLogCreateOrConnectWithoutVipCardInput!]
  createMany: VipUserClaimProfitChangeLogCreateManyVipCardInputEnvelope
  connect: [VipUserClaimProfitChangeLogWhereUniqueInput!]
}

input VipUserClaimProfitChangeLogCreateWithoutVipCardInput {
  id: String
  amount: Decimal!
  number_quarter: Int!
  is_claim: Boolean
  created_at: DateTime
  updated_at: DateTime
}

input VipUserClaimProfitChangeLogCreateOrConnectWithoutVipCardInput {
  where: VipUserClaimProfitChangeLogWhereUniqueInput!
  create: VipUserClaimProfitChangeLogCreateWithoutVipCardInput!
}

input VipUserClaimProfitChangeLogWhereUniqueInput {
  id: String
}

input VipUserClaimProfitChangeLogCreateManyVipCardInputEnvelope {
  data: [VipUserClaimProfitChangeLogCreateManyVipCardInput!]!
  skipDuplicates: Boolean
}

input VipUserClaimProfitChangeLogCreateManyVipCardInput {
  id: String
  amount: Decimal!
  number_quarter: Int!
  is_claim: Boolean
  created_at: DateTime
  updated_at: DateTime
}

input VipCardUpdateInputGql {
  number: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tier: NullableEnumVipCardTierFieldUpdateOperationsInput
  valid_from: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVipCardNestedInput
  card_value: DecimalFieldUpdateOperationsInput
  change_log: VipUserClaimProfitChangeLogUpdateManyWithoutVipCardNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableEnumVipCardTierFieldUpdateOperationsInput {
  set: VipCardTier
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input UserUpdateOneRequiredWithoutVipCardNestedInput {
  create: UserCreateWithoutVipCardInput
  connectOrCreate: UserCreateOrConnectWithoutVipCardInput
  upsert: UserUpsertWithoutVipCardInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutVipCardInput
}

input UserUpsertWithoutVipCardInput {
  update: UserUpdateWithoutVipCardInput!
  create: UserCreateWithoutVipCardInput!
}

input UserUpdateWithoutVipCardInput {
  id: StringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  ref_code: StringFieldUpdateOperationsInput
  invited_by: NullableStringFieldUpdateOperationsInput
  google_id: NullableStringFieldUpdateOperationsInput
  facebook_id: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  kyc_verification: UserKycVerificationUpdateManyWithoutUserNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
  referral_log: ReferralLogUpdateOneWithoutUserNestedInput
  wallet: WalletUpdateOneWithoutUserNestedInput
  wallet_address: NullableStringFieldUpdateOperationsInput
  projectNfts: ProjectNftOwnerUpdateManyWithoutUserNestedInput
  transaction_log: TransactionLogUpdateManyWithoutUserNestedInput
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input EnumUserStatusFieldUpdateOperationsInput {
  set: UserStatus
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input UserProfileUpdateOneWithoutUserNestedInput {
  create: UserProfileCreateWithoutUserInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  upsert: UserProfileUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: UserProfileWhereUniqueInput
  update: UserProfileUpdateWithoutUserInput
}

input UserProfileUpsertWithoutUserInput {
  update: UserProfileUpdateWithoutUserInput!
  create: UserProfileCreateWithoutUserInput!
}

input UserProfileUpdateWithoutUserInput {
  user_name: NullableStringFieldUpdateOperationsInput
  display_name: NullableStringFieldUpdateOperationsInput
  given_name: NullableStringFieldUpdateOperationsInput
  family_name: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  avatar: NullableStringFieldUpdateOperationsInput
  date_of_birth: NullableDateTimeFieldUpdateOperationsInput
  cover: NullableStringFieldUpdateOperationsInput
  country_code: NullableStringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input UserKycVerificationUpdateManyWithoutUserNestedInput {
  create: [UserKycVerificationCreateWithoutUserInput!]
  connectOrCreate: [UserKycVerificationCreateOrConnectWithoutUserInput!]
  upsert: [UserKycVerificationUpsertWithWhereUniqueWithoutUserInput!]
  createMany: UserKycVerificationCreateManyUserInputEnvelope
  set: [UserKycVerificationWhereUniqueInput!]
  disconnect: [UserKycVerificationWhereUniqueInput!]
  delete: [UserKycVerificationWhereUniqueInput!]
  connect: [UserKycVerificationWhereUniqueInput!]
  update: [UserKycVerificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserKycVerificationUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [UserKycVerificationScalarWhereInput!]
}

input UserKycVerificationUpsertWithWhereUniqueWithoutUserInput {
  where: UserKycVerificationWhereUniqueInput!
  update: UserKycVerificationUpdateWithoutUserInput!
  create: UserKycVerificationCreateWithoutUserInput!
}

input UserKycVerificationUpdateWithoutUserInput {
  front_id: StringFieldUpdateOperationsInput
  back_id: StringFieldUpdateOperationsInput
  holding_id: StringFieldUpdateOperationsInput
  status: EnumKycStatusFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input EnumKycStatusFieldUpdateOperationsInput {
  set: KycStatus
}

input UserKycVerificationUpdateWithWhereUniqueWithoutUserInput {
  where: UserKycVerificationWhereUniqueInput!
  data: UserKycVerificationUpdateWithoutUserInput!
}

input UserKycVerificationUpdateManyWithWhereWithoutUserInput {
  where: UserKycVerificationScalarWhereInput!
  data: UserKycVerificationUpdateManyMutationInput!
}

input UserKycVerificationScalarWhereInput {
  AND: [UserKycVerificationScalarWhereInput!]
  OR: [UserKycVerificationScalarWhereInput!]
  NOT: [UserKycVerificationScalarWhereInput!]
  id: IntFilter
  user_id: StringFilter
  front_id: StringFilter
  back_id: StringFilter
  holding_id: StringFilter
  status: EnumKycStatusFilter
  created_at: DateTimeFilter
  updated_at: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input EnumKycStatusFilter {
  equals: KycStatus
  in: [KycStatus!]
  notIn: [KycStatus!]
  not: NestedEnumKycStatusFilter
}

input NestedEnumKycStatusFilter {
  equals: KycStatus
  in: [KycStatus!]
  notIn: [KycStatus!]
  not: NestedEnumKycStatusFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UserKycVerificationUpdateManyMutationInput {
  front_id: StringFieldUpdateOperationsInput
  back_id: StringFieldUpdateOperationsInput
  holding_id: StringFieldUpdateOperationsInput
  status: EnumKycStatusFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input ReferralLogUpdateOneWithoutUserNestedInput {
  create: ReferralLogCreateWithoutUserInput
  connectOrCreate: ReferralLogCreateOrConnectWithoutUserInput
  upsert: ReferralLogUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: ReferralLogWhereUniqueInput
  update: ReferralLogUpdateWithoutUserInput
}

input ReferralLogUpsertWithoutUserInput {
  update: ReferralLogUpdateWithoutUserInput!
  create: ReferralLogCreateWithoutUserInput!
}

input ReferralLogUpdateWithoutUserInput {
  invited_by: StringFieldUpdateOperationsInput
  type: NullableEnumReferralTypeFieldUpdateOperationsInput
  is_claim: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input NullableEnumReferralTypeFieldUpdateOperationsInput {
  set: ReferralType
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input WalletUpdateOneWithoutUserNestedInput {
  create: WalletCreateWithoutUserInput
  connectOrCreate: WalletCreateOrConnectWithoutUserInput
  upsert: WalletUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: WalletWhereUniqueInput
  update: WalletUpdateWithoutUserInput
}

input WalletUpsertWithoutUserInput {
  update: WalletUpdateWithoutUserInput!
  create: WalletCreateWithoutUserInput!
}

input WalletUpdateWithoutUserInput {
  balance: DecimalFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input DecimalFieldUpdateOperationsInput {
  set: Decimal
  increment: Decimal
  decrement: Decimal
  multiply: Decimal
  divide: Decimal
}

input ProjectNftOwnerUpdateManyWithoutUserNestedInput {
  create: [ProjectNftOwnerCreateWithoutUserInput!]
  connectOrCreate: [ProjectNftOwnerCreateOrConnectWithoutUserInput!]
  upsert: [ProjectNftOwnerUpsertWithWhereUniqueWithoutUserInput!]
  createMany: ProjectNftOwnerCreateManyUserInputEnvelope
  set: [ProjectNftOwnerWhereUniqueInput!]
  disconnect: [ProjectNftOwnerWhereUniqueInput!]
  delete: [ProjectNftOwnerWhereUniqueInput!]
  connect: [ProjectNftOwnerWhereUniqueInput!]
  update: [ProjectNftOwnerUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProjectNftOwnerUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ProjectNftOwnerScalarWhereInput!]
}

input ProjectNftOwnerUpsertWithWhereUniqueWithoutUserInput {
  where: ProjectNftOwnerWhereUniqueInput!
  update: ProjectNftOwnerUpdateWithoutUserInput!
  create: ProjectNftOwnerCreateWithoutUserInput!
}

input ProjectNftOwnerUpdateWithoutUserInput {
  project_id: StringFieldUpdateOperationsInput
  total_nft: IntFieldUpdateOperationsInput
  currency_amount: DecimalFieldUpdateOperationsInput
  project_ended: BoolFieldUpdateOperationsInput
  is_sell_voted: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input ProjectNftOwnerUpdateWithWhereUniqueWithoutUserInput {
  where: ProjectNftOwnerWhereUniqueInput!
  data: ProjectNftOwnerUpdateWithoutUserInput!
}

input ProjectNftOwnerUpdateManyWithWhereWithoutUserInput {
  where: ProjectNftOwnerScalarWhereInput!
  data: ProjectNftOwnerUpdateManyMutationInput!
}

input ProjectNftOwnerScalarWhereInput {
  AND: [ProjectNftOwnerScalarWhereInput!]
  OR: [ProjectNftOwnerScalarWhereInput!]
  NOT: [ProjectNftOwnerScalarWhereInput!]
  project_id: StringFilter
  user_id: StringFilter
  total_nft: IntFilter
  currency_amount: DecimalFilter
  project_ended: BoolFilter
  is_sell_voted: BoolFilter
  created_at: DateTimeFilter
  updated_at: DateTimeFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input NestedDecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input ProjectNftOwnerUpdateManyMutationInput {
  project_id: StringFieldUpdateOperationsInput
  total_nft: IntFieldUpdateOperationsInput
  currency_amount: DecimalFieldUpdateOperationsInput
  project_ended: BoolFieldUpdateOperationsInput
  is_sell_voted: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input TransactionLogUpdateManyWithoutUserNestedInput {
  create: [TransactionLogCreateWithoutUserInput!]
  connectOrCreate: [TransactionLogCreateOrConnectWithoutUserInput!]
  upsert: [TransactionLogUpsertWithWhereUniqueWithoutUserInput!]
  createMany: TransactionLogCreateManyUserInputEnvelope
  set: [TransactionLogWhereUniqueInput!]
  disconnect: [TransactionLogWhereUniqueInput!]
  delete: [TransactionLogWhereUniqueInput!]
  connect: [TransactionLogWhereUniqueInput!]
  update: [TransactionLogUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TransactionLogUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [TransactionLogScalarWhereInput!]
}

input TransactionLogUpsertWithWhereUniqueWithoutUserInput {
  where: TransactionLogWhereUniqueInput!
  update: TransactionLogUpdateWithoutUserInput!
  create: TransactionLogCreateWithoutUserInput!
}

input TransactionLogUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  amount: DecimalFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  blockchain_transaction: BlockchainTransactionUpdateOneWithoutTransaction_logNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input EnumTransactionTypeFieldUpdateOperationsInput {
  set: TransactionType
}

input BlockchainTransactionUpdateOneWithoutTransaction_logNestedInput {
  create: BlockchainTransactionCreateWithoutTransaction_logInput
  connectOrCreate: BlockchainTransactionCreateOrConnectWithoutTransaction_logInput
  upsert: BlockchainTransactionUpsertWithoutTransaction_logInput
  disconnect: Boolean
  delete: Boolean
  connect: BlockchainTransactionWhereUniqueInput
  update: BlockchainTransactionUpdateWithoutTransaction_logInput
}

input BlockchainTransactionUpsertWithoutTransaction_logInput {
  update: BlockchainTransactionUpdateWithoutTransaction_logInput!
  create: BlockchainTransactionCreateWithoutTransaction_logInput!
}

input BlockchainTransactionUpdateWithoutTransaction_logInput {
  id: StringFieldUpdateOperationsInput
  tx_hash: StringFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  message_error: NullableStringFieldUpdateOperationsInput
  abi: NullableStringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input EnumTransactionStatusFieldUpdateOperationsInput {
  set: TransactionStatus
}

input TransactionLogUpdateWithWhereUniqueWithoutUserInput {
  where: TransactionLogWhereUniqueInput!
  data: TransactionLogUpdateWithoutUserInput!
}

input TransactionLogUpdateManyWithWhereWithoutUserInput {
  where: TransactionLogScalarWhereInput!
  data: TransactionLogUpdateManyMutationInput!
}

input TransactionLogScalarWhereInput {
  AND: [TransactionLogScalarWhereInput!]
  OR: [TransactionLogScalarWhereInput!]
  NOT: [TransactionLogScalarWhereInput!]
  id: StringFilter
  type: EnumTransactionTypeFilter
  user_id: StringFilter
  amount: DecimalFilter
  description: StringNullableFilter
  created_at: DateTimeFilter
  updated_at: DateTimeFilter
}

input EnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input NestedEnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringNullableFilter
}

input TransactionLogUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  type: EnumTransactionTypeFieldUpdateOperationsInput
  amount: DecimalFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input VipUserClaimProfitChangeLogUpdateManyWithoutVipCardNestedInput {
  create: [VipUserClaimProfitChangeLogCreateWithoutVipCardInput!]
  connectOrCreate: [VipUserClaimProfitChangeLogCreateOrConnectWithoutVipCardInput!]
  upsert: [VipUserClaimProfitChangeLogUpsertWithWhereUniqueWithoutVipCardInput!]
  createMany: VipUserClaimProfitChangeLogCreateManyVipCardInputEnvelope
  set: [VipUserClaimProfitChangeLogWhereUniqueInput!]
  disconnect: [VipUserClaimProfitChangeLogWhereUniqueInput!]
  delete: [VipUserClaimProfitChangeLogWhereUniqueInput!]
  connect: [VipUserClaimProfitChangeLogWhereUniqueInput!]
  update: [VipUserClaimProfitChangeLogUpdateWithWhereUniqueWithoutVipCardInput!]
  updateMany: [VipUserClaimProfitChangeLogUpdateManyWithWhereWithoutVipCardInput!]
  deleteMany: [VipUserClaimProfitChangeLogScalarWhereInput!]
}

input VipUserClaimProfitChangeLogUpsertWithWhereUniqueWithoutVipCardInput {
  where: VipUserClaimProfitChangeLogWhereUniqueInput!
  update: VipUserClaimProfitChangeLogUpdateWithoutVipCardInput!
  create: VipUserClaimProfitChangeLogCreateWithoutVipCardInput!
}

input VipUserClaimProfitChangeLogUpdateWithoutVipCardInput {
  id: StringFieldUpdateOperationsInput
  amount: DecimalFieldUpdateOperationsInput
  number_quarter: IntFieldUpdateOperationsInput
  is_claim: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input VipUserClaimProfitChangeLogUpdateWithWhereUniqueWithoutVipCardInput {
  where: VipUserClaimProfitChangeLogWhereUniqueInput!
  data: VipUserClaimProfitChangeLogUpdateWithoutVipCardInput!
}

input VipUserClaimProfitChangeLogUpdateManyWithWhereWithoutVipCardInput {
  where: VipUserClaimProfitChangeLogScalarWhereInput!
  data: VipUserClaimProfitChangeLogUpdateManyMutationInput!
}

input VipUserClaimProfitChangeLogScalarWhereInput {
  AND: [VipUserClaimProfitChangeLogScalarWhereInput!]
  OR: [VipUserClaimProfitChangeLogScalarWhereInput!]
  NOT: [VipUserClaimProfitChangeLogScalarWhereInput!]
  id: StringFilter
  card_id: StringFilter
  amount: DecimalFilter
  number_quarter: IntFilter
  is_claim: BoolFilter
  created_at: DateTimeFilter
  updated_at: DateTimeFilter
}

input VipUserClaimProfitChangeLogUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  amount: DecimalFieldUpdateOperationsInput
  number_quarter: IntFieldUpdateOperationsInput
  is_claim: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}