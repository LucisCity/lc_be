# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Notification {
  id: ID!
  user_id: String!
  title: String
  content: String
  is_seen: Boolean!
  link: String
  user: User!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserKycVerification {
  id: ID!
  user_id: String!
  front_id: String!
  back_id: String!
  holding_id: String!
  status: KycStatus!
  user: User!
  created_at: DateTime!
  updated_at: DateTime!
}

enum KycStatus {
  PENDING
  SUCCESS
  FAILED
}

type ReferralLog {
  user_id: ID!
  user: User!
  invited_by: String!
  type: ReferralType
  is_claim: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
}

enum ReferralType {
  REGISTER
  BUY_GALAXY_CARD
}

type BlockchainTransaction {
  id: ID!
  tx_hash: String!
  status: TransactionStatus!
  message_error: String
  abi: String
  transaction_log_id: String
  transaction_log: TransactionLog
  created_at: DateTime!
  updated_at: DateTime!
}

enum TransactionStatus {
  PENDING
  PROCESSING
  CONFIRMING
  SUCCEED
  FAILED
}

type TransactionLog {
  id: ID!
  type: TransactionType!
  user_id: String!
  wallet: Wallet!
  amount: Decimal!
  description: String
  blockchain_transaction: BlockchainTransaction
  created_at: DateTime!
  updated_at: DateTime!
}

enum TransactionType {
  CLAIM_REFERRAL
  CLAIM_PROFIT
  BUY_NFT
  WITHDRAW_BALANCE
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type WalletCount {
  transaction_log: Int!
}

type Wallet {
  user_id: ID!
  user: User!
  balance: Decimal!
  transaction_log: [TransactionLog!]
  created_at: DateTime!
  updated_at: DateTime!
  _count: WalletCount!
}

type UserCount {
  notification: Int!
  kyc_verification: Int!
}

type User {
  id: ID!
  role: UserRole!
  status: UserStatus!
  email: String
  ref_code: String!
  invited_by: String
  google_id: String
  facebook_id: String
  password: String
  profile: UserProfile
  notification: [Notification!]
  kyc_verification: [UserKycVerification!]
  created_at: DateTime!
  updated_at: DateTime!
  referral_log: ReferralLog
  wallet: Wallet
  wallet_address: String
  _count: UserCount!
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
}

type UserProfile {
  user_id: ID!
  user_name: String
  display_name: String
  given_name: String
  family_name: String
  phone: String
  avatar: String
  date_of_birth: DateTime
  cover: String
  country_code: String
  user: User!
  created_at: DateTime!
  updated_at: DateTime!
}

type ProfileGql {
  user_id: ID!
  user_name: String
  display_name: String
  given_name: String
  family_name: String
  avatar: String
  date_of_birth: DateTime
  cover: String
}

type UserGql {
  id: ID!
  email: String
  ref_code: String!
  notification: [Notification!]
  kyc_verification: [UserKycVerification!]
  referral_log: ReferralLog
  wallet: Wallet
  wallet_address: String
  _count: UserCount!
  profile: ProfileGql!
}

type AuthGql {
  token: String!
  user: UserGql!
}

type Query {
  """list pending kycs"""
  getPendingKycs: [UserKycVerification!]

  """list kycs with options"""
  getKycs(userId: String, id: Int, status: KycStatus): [UserKycVerification!]
}

type Mutation {
  """Upload new project"""
  uploadProject(input: ProjectCreateInputGql!): Boolean

  """Admin login"""
  login(email: String!, password: String!): AuthGql!

  """Admin register"""
  register(email: String!, password: String!): Boolean!

  """update kycs"""
  updateKyc(userId: String, status: KycStatus): Boolean
}

input ProjectCreateInputGql {
  title: String!
  price: Int!
  type: ProjectType
  thumbnail: String!
  address: String!
  policy_link: String!
  profit_period: Int!
  profit_period_index: Int
  contract: ContractCreateNestedOneWithoutProjectInput
  created_at: DateTime
  updated_at: DateTime
  location: String!
  open_sale_at: DateTime!
  take_profit_at: DateTime!
  profile: ProjectProfileCreateInputGql!
  contract_address: String
}

enum ProjectType {
  HOUSE
  VILLA
  HOTEL
  HOMESTAY
  TOURIST_VILLAGE
}

input ContractCreateNestedOneWithoutProjectInput {
  create: ContractCreateWithoutProjectInput
  connectOrCreate: ContractCreateOrConnectWithoutProjectInput
  connect: ContractWhereUniqueInput
}

input ContractCreateWithoutProjectInput {
  id: String
  address: String!
  admin: String
  admin_prv_key: String
  abi: String
  type: ContractType
  created_at: DateTime
  updated_at: DateTime
}

enum ContractType {
  TOKEN
  NFT
}

input ContractCreateOrConnectWithoutProjectInput {
  where: ContractWhereUniqueInput!
  create: ContractCreateWithoutProjectInput!
}

input ContractWhereUniqueInput {
  id: String
  address: String
}

input ProjectProfileCreateInputGql {
  create: ProjectProfileCreateWithoutProjectInputGql
}

input ProjectProfileCreateWithoutProjectInputGql {
  reason_invest: String
  hightlight: String
  medias: [ProjectMedia!]!
  offers: [Int!]!
  events: [ProjectEvent!]!
}

input ProjectMedia {
  """Width of image"""
  width: Int!

  """Height of image"""
  height: Int!

  """Media url"""
  url: String!

  """Thumbnail url"""
  thumbnail: String
}

input ProjectEvent {
  """Event start time"""
  start_at: DateTime!

  """Event title"""
  title: String!

  """Event description"""
  description: String!
}